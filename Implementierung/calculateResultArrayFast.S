.intel_syntax noprefix
.global calculateWholeFunction
.global calculateFunctionBinarySearch
//.section .rodata
    //The first value is not important for calculation but it is easier to get the right value from the index
    //logValues: .double -1000,-5.541264,-4.848116,-4.442651,-4.154969,-3.931826,-3.749504,-3.595353,-3.461822,-3.344039,-3.238678,-3.143368,-3.056357,-2.976314,-2.902206,-2.833213,-2.768675,-2.708050,-2.650892,-2.596825,-2.545531,-2.496741,-2.450221,-2.405769,-2.363210,-2.322388,-2.283167,-2.245427,-2.209059,-2.173968,-2.140066,-2.107276,-2.075528,-2.044756,-2.014903,-1.985915,-1.957745,-1.930346,-1.903677,-1.877702,-1.852384,-1.827691,-1.803594,-1.780063,-1.757074,-1.734601,-1.712622,-1.691116,-1.670063,-1.649443,-1.629241,-1.609438,-1.590020,-1.570972,-1.552279,-1.533930,-1.515912,-1.498212,-1.480821,-1.463726,-1.446919,-1.430390,-1.414129,-1.398129,-1.382380,-1.366876,-1.351609,-1.336571,-1.321756,-1.307157,-1.292768,-1.278584,-1.264597,-1.250804,-1.237198,-1.223775,-1.210530,-1.197458,-1.184555,-1.171816,-1.159237,-1.146814,-1.134544,-1.122423,-1.110447,-1.098612,-1.086916,-1.075355,-1.063927,-1.052627,-1.041454,-1.030404,-1.019475,-1.008664,-0.997969,-0.987387,-0.976915,-0.966553,-0.956296,-0.946144,-0.936093,-0.926143,-0.916291,-0.906535,-0.896873,-0.887303,-0.877824,-0.868435,-0.859132,-0.849916,-0.840783,-0.831733,-0.822765,-0.813876,-0.805065,-0.796331,-0.787673,-0.779090,-0.770579,-0.762140,-0.753772,-0.745473,-0.737243,-0.729079,-0.720982,-0.712950,-0.704982,-0.697076,-0.689233,-0.681451,-0.673729,-0.666066,-0.658462,-0.650914,-0.643424,-0.635989,-0.628609,-0.621283,-0.614010,-0.606790,-0.599621,-0.592504,-0.585436,-0.578419,-0.571450,-0.564530,-0.557657,-0.550831,-0.544051,-0.537317,-0.530628,-0.523984,-0.517383,-0.510826,-0.504311,-0.497838,-0.491408,-0.485018,-0.478669,-0.472359,-0.466090,-0.459859,-0.453667,-0.447513,-0.441397,-0.435318,-0.429276,-0.423270,-0.417300,-0.411365,-0.405465,-0.399600,-0.393769,-0.387972,-0.382208,-0.376478,-0.370780,-0.365114,-0.359480,-0.353878,-0.348307,-0.342767,-0.337257,-0.331777,-0.326328,-0.320908,-0.315517,-0.310155,-0.304822,-0.299517,-0.294239,-0.288990,-0.283768,-0.278573,-0.273405,-0.268264,-0.263149,-0.258060,-0.252997,-0.247959,-0.242946,-0.237959,-0.232996,-0.228058,-0.223144,-0.218254,-0.213387,-0.208545,-0.203725,-0.198929,-0.194156,-0.189405,-0.184677,-0.179971,-0.175288,-0.170626,-0.165985,-0.161366,-0.156768,-0.152192,-0.147636,-0.143101,-0.138586,-0.134092,-0.129617,-0.125163,-0.120729,-0.116314,-0.111918,-0.107542,-0.103184,-0.098846,-0.094526,-0.090225,-0.085942,-0.081678,-0.077432,-0.073203,-0.068993,-0.064800,-0.060625,-0.056467,-0.052326,-0.048202,-0.044095,-0.040005,-0.035932,-0.031875,-0.027835,-0.023811,-0.019803,-0.015811,-0.011834,-0.007874,-0.003929
.text

//xmm0 gamma
//logArray rdi
//gammaArray rsi
//functionArray rdx
calculateWholeFunction:
//r9 gammaCounter
xor r9, r9
//r8 logCounter
xor r8, r8
//rax loopIndex
xor rax, rax
//Initialize gammaArray
loop:
cmp rax, 254
jge endLoop
//xmm1 *(logArray+i)
movsd xmm1, [rdi + rax * 8]
//multiply with gamma
mulsd xmm1, xmm0 
movsd [rsi + rax * 8], xmm1
inc rax
jmp loop

endLoop:
whileLoop:
cmp r9, 255
jge endWhileLoop
//xmm1 logArrayValue
movsd xmm1, [rdi + r8 * 8]
//xmm2 lgammaArrayValue
movsd xmm2, [rsi + r9 * 8]
ucomisd xmm1, xmm2
jb increaseLogCounter
mov [rdx + r9], r8
inc r9
jmp whileLoop
increaseLogCounter:
inc r8
jmp whileLoop
endWhileLoop:
mov rax, rdx
ret

calculateFunctionBinarySearch:
//xmm0 gamma
//rdi input
//rsi logValuesPointer
//set rax to null
cmp rdi, 0
jne label
xor rax, rax
ret
label:
//min r8
//max r9
//middle r10
//xmm1 logResult
//xmm2 logSearch
//calculate logResult
movsd xmm1, [rsi + rdi * 8]
mulsd xmm1, xmm0
xor r8, r8
mov r9, 256
while:
cmp r8, r9
jge endWhile
//calculate middle
mov r10, r8
add r10, r9
sar r10, 1
inc r10
//calculate logSearch
movsd xmm2, [rsi + r10 * 8]
comisd xmm2, xmm1
ja changeMax
mov r8, r10
jmp while
changeMax:
mov r9, r10
dec r9
jmp while
endWhile:
mov rax, r8
ret
