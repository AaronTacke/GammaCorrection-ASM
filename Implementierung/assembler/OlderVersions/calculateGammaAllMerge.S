.intel_syntax noprefix
.global _calculate_asm
.global calculate_asm
.data
    //The first value is not important for calculation but it is easier to get the right value from the index
    logValues: .double -1000,-5.5412635451584258,-4.8481163645984813,-4.4426512564903167,-4.1549691840385359,-3.9318256327243257,-3.7495040759303713,-3.5953533961031128,-3.46182200347859,-3.3440389678222067,-3.2386784521643803,-3.1433682723600556,-3.0563568953704259,-2.9763141876968895,-2.9022062155431674,-2.8332133440562162,-2.7686748229186451,-2.7080502011022101,-2.6508917872622613,-2.5968245659919855,-2.5455312716044354,-2.4967411074350032,-2.4502210918001102,-2.4057693292292766,-2.3632097148104805,-2.3223877202902252,-2.2831670071369441,-2.2454266791540971,-2.2090590349832224,-2.1739677151719521,-2.1400661634962708,-2.10727634067328,-2.0755276423586997,-2.044755983691946,-2.0149030205422647,-1.9859154836690123,-1.9577446067023161,-1.9303456325142017,-1.9036773854320403,-1.8777018990287797,-1.8523840910444898,-1.8276914784541183,-1.8035939268750578,-1.7800634294648636,-1.757073911240165,-1.7346010553881064,-1.7126221486693312,-1.6911159434483676,-1.6700625342505353,-1.6494432470477995,-1.62924053973028,-1.6094379124341003,-1.5900198265769987,-1.5709716316063043,-1.5522794985941517,-1.5339303599259553,-1.515911854423277,-1.498212277323876,-1.4808205346120069,-1.4637261012527067,-1.4469189829363254,-1.4303896809851149,-1.4141291601133346,-1.3981288187668934,-1.3823804617987543,-1.3668762752627892,-1.3516088031320006,-1.3365709257674601,-1.3217558399823195,-1.3071570405611668,-1.2927683031090671,-1.2785836681171108,-1.2645974261423709,-1.2508041040100351,-1.2371984519542563,-1.2237754316221157,-1.2105302048720952,-1.1974581233047423,-1.1845547184688343,-1.1718156926914047,-1.1592369104845446,-1.1468143904859875,-1.1345442978941729,-1.1224229373618282,-1.1104467463151126,-1.0986122886681098,-1.0869162489049184,-1.0753554265038423,-1.0639267306802196,-1.0526271754262864,-1.041453874828161,-1.030404038641576,-1.0194749681093858,-1.0086640520051702,-0.99796876288842218,-0.98738665355788524,-0.9769153536905899,-0.96655256665504341,-0.95629606648785415,-0.94614369502383622,-0.93609335917033476,-0.92614302831716677,-0.916290731874155,-0.90653455692879037,-0.89687264601705352,-0.88730319500090282,-0.87782445104635898,-0.86843471069652001,-0.85913231803420642,-0.84991566292928244,-0.84078317936600988,-0.83173334384609199,-0.82276467386333163,-0.81387572644608563,-0.80506509676393068,-0.79633141679517605,-0.78767335405206151,-0.77908961036067004,-0.77057892069276135,-0.76214005204689672,-0.7537718023763802,-0.74547299956168511,-0.73724250042516959,-0.72907918978600861,-0.72098197955338927,-0.71294980785612505,-0.70498163820694815,-0.69707645869983481,-0.689233281238809,-0.68145114079675406,-0.67372909470284381,-0.66606622195727472,-0.65846162257205521,-0.65091441693667229,-0.64342374520751477,-0.63598876671999671,-0.62860865942237421,-0.62128261933030127,-0.61400986000122149,-0.60678961202773452,-0.59962112254912181,-0.59250365478025779,-0.58543648755716537,-0.57841891489851882,-0.57145024558242552,-0.5645298027378518,-0.55765692345008977,-0.55083095837968998,-0.54405127139431098,-0.53731723921296692,-0.53062825106217038,-0.52398370834350183,-0.51738302431214978,-0.51082562376599072,-0.50431094274479704,-0.49783842823917962,-0.49140753790888902,-0.48501773981011803,-0.47866851213145933,-0.47235934293819459,-0.46608972992459924,-0.45985918017396321,-0.45366720992604215,-0.4475133443516639,-0.44139711733422765,-0.4353180712578455,-0.4292757568018829,-0.42326973274167101,-0.41729956575516725,-0.4113648302353527,-0.40546510810816444,-0.3995999886557664,-0.39376906834497305,-0.38797195066064716,-0.38220824594389707,-0.3764775712349121,-0.37077955012027436,-0.36511381258459702,-0.35947999486634108,-0.35387773931767125,-0.3483066942682157,-0.34276651389260038,-0.33725685808163075,-0.3317773923170052,-0.32632778754944053,-0.32090772008010138,-0.31551687144522494,-0.31015492830383962,-0.30482158232847689,-0.29951653009878371,-0.29423947299793995,-0.28899011711179629,-0.28376817313064462,-0.27857335625354063,-0.27340538609509807,-0.26826398659467943,-0.26314888592790886,-0.25805981642043763,-0.25299651446389088,-0.24795872043393374,-0.24294617861038947,-0.23795863709935042,-0.23299584775722143,-0.22805756611663888,-0.22314355131420971,-0.21825356602001794,-0.21338737636884506,-0.20854475189305707,-0.20372546545710818,-0.19892929319361519,-0.19415601444095751,-0.18940541168235972,-0.18467727048641364,-0.17997137944900099,-0.17528753013657464,-0.17062551703076334,-0.16598513747426116,-0.16136619161796661,-0.15676848236933719,-0.15219181534192538,-0.14763599880606457,-0.1431008436406733,-0.13858616328614667,-0.13409177369830738,-0.12961749330338632,-0.12516314295400605,-0.12072854588614031,-0.11631352767702353,-0.11191791620398532,-0.10754154160418647,-0.10318423623523075,-0.098845834636632601,-0.0945261734921162,-0.090225091592725612,-0.085942429800724765,-0.081678031014267238,-0.077431740132816035,-0.073203404023294935,-0.068992871486951435,-0.064799993226915473,-0.060624621816434854,-0.056466611667771179,-0.052325819001739791,-0.048202101817877749,-0.044095319865224233,-0.04000533461369913,-0.035932009226063329,-0.031875208530448951,-0.027834798993443988,-0.023810648693718559,-0.019802627296179754,-0.015810606026642315,-0.011834457647002796,-0.007874056430905883,-0.0039292781398895501
.bss
.lcomm gammaValues, 16320
.lcomm result, 255
.text

_calculate_asm:
call calculate_asm
ret




calculate_asm:
//Register Usage:
//rdi: array pointer
//rsi: width
//rdx: height
//xmm0: gamma
//rax: return value (pointer to result array)


//calculateWholeFunction:
//xmm0 gamma
CVTPS2PD xmm0, xmm0
//logArray rcx
//gammaArray r10
//functionArray r11
lea rcx, [rip + logValues]
lea r11, [rip + gammaValues]
lea r10, [rip + result]
//r9 gammaCounter
xor r9, r9
//r8 logCounter
xor r8, r8
//rax loopIndex
xor rax, rax

//Initialize gammaArray
loop:
cmp rax, 255
jge endLoop
//xmm1 *(logArray+i)
movsd xmm1, [rcx + rax * 8 +8]
//multiply with gamma
mulsd xmm1, xmm0
movsd [r11 + rax * 8], xmm1
inc rax
jmp loop

endLoop:
whileLoop:
cmp r9, 255
jge endWhileLoop
//xmm1 logArrayValue
movsd xmm1, [rcx + r8 * 8 +8]
//xmm2 gammaArrayValue
movsd xmm2, [r11 + r9 * 8]
ucomisd xmm1, xmm2
ja increaseLogCounter
inc r8
jmp whileLoop
increaseLogCounter:
mov [r10 + r9 + 1], r8b
inc r9
jmp whileLoop
endWhileLoop:
mov byte ptr [r10 + 255], 255
//FUNCITON NOW IS STARTING AT R10



mov rax, rdi
//new array-Pointer: r8
mov r8, rdi

imul rsi, rdx
imul rsi, 3
add rsi, r8
//rsi points to first byte that is not part of the array.

//ByteMask to Shift result bytes all over xmm register:
pxor xmm14, xmm14
mov rcx, 0x0001010102020203
movq xmm14, rcx
PSLLDQ xmm14, 8
mov rcx, 0x0303040404050505
movq xmm15, rcx
por xmm14, xmm15


1://Begin of loop
cmp rsi, r8
JB 1f //End of loop

movdqu xmm3, [r8]

//PIXEL 1:
movd edi, xmm3
and rdi, 0x00000000000000ff
mov rax, [r10+rdi]
and rax, 0x00000000000000ff
mov r13, rax
//PIXEL 2:
PSRLDQ xmm3, 3
movd edi, xmm3
and rdi, 0x00000000000000ff
mov rax, [r10+rdi]
and rax, 0x00000000000000ff
SHL r13, 8
or r13, rax
//PIXEL 3:
PSRLDQ xmm3, 3
movd edi, xmm3
and rdi, 0x00000000000000ff
mov rax, [r10+rdi]
and rax, 0x00000000000000ff
SHL r13, 8
or r13, rax
//PIXEL 4:
PSRLDQ xmm3, 3
movd edi, xmm3
and rdi, 0x00000000000000ff
mov rax, [r10+rdi]
and rax, 0x00000000000000ff
SHL r13, 8
or r13, rax
//PIXEL 5:
PSRLDQ xmm3, 3
movd edi, xmm3
and rdi, 0x00000000000000ff
mov rax, [r10+rdi]
and rax, 0x00000000000000ff
SHL r13, 8
or r13, rax
//Save last byte:
PSRLDQ xmm3, 3
movd rax, xmm3
SHL r13, 8
or r13,rax
movq xmm3, r13
PSHUFB xmm3, xmm14


//Move result to memory
movdqu [r8], xmm3

add r8, 15
jmp 1b
1:
ret